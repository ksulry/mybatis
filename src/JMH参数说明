1. @BenchmarkMode用来配置 Mode 选项，可用于类或者方法上，这个注解的 value 是一个数组，可以把几种 Mode 集合在一起执行，如：@BenchmarkMode({Mode.SampleTime, Mode.AverageTime})，还可以设置为 Mode.All，即全部执行一遍

   1）Throughput：整体吞吐量，每秒执行了多少次调用，单位为 ops/time
   2）AverageTime：用的平均时间，每次操作的平均时间，单位为 time/op
   3）SampleTime：随机取样，最后输出取样结果的分布
   4）SingleShotTime：只运行一次，往往同时把 Warmup 次数设为 0，用于测试冷启动时的性能
   5）All：上面的所有模式都执行一次

2.  @State通过 State 可以指定一个对象的作用范围，JMH 根据 scope 来进行实例化和共享操作。
    @State 可以被继承使用，如果父类定义了该注解，子类则无需定义。
    由于 JMH 允许多线程同时执行测试，不同的选项含义如下：Scope.Benchmark：所有测试线程共享一个实例，
    测试有状态实例在多线程共享下的性能Scope.Group：同一个线程在同一个 group 里共享实例Scope.Thread：默认的 State，每个测试线程分配一个实例

3.  @Warmup
    预热所需要配置的一些基本测试参数，可用于类或者方法上。一般前几次进行程序测试的时候都会比较慢，
    所以要让程序进行几轮预热，保证测试的准确性。参数如下所示：
    iterations：预热的次数
    time：每次预热的时间
    timeUnit：时间的单位，默认秒
    batchSize：批处理大小，每次操作调用几次方法

4.  @Threads
    每个进程中的测试线程，可用于类或者方法上。

5.  @Fork
    进行 fork 的次数，可用于类或者方法上。如果 fork 数是 2 的话，则 JMH 会 fork 出两个进程来进行测试。


